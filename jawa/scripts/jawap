#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""jawap

A jawa utility for working with JVM ClassFiles and JarFiles.

Commands:
    jawa grep           - Search for patterns in ClassFile constants.

Usage:
    jawap grep <pattern> <files>... [--utf8 --this]

Options:
    --utf8              When searching for strings, also search
                        raw UTF-8 constants, which can be very large
                        and contain unprintable characters.
    --this              Display the class where a match was found.
"""
import re
import sys

from docopt import docopt
from colorama import init, Fore

from jawa.version import __version__
from jawa.cf.constants import String, Utf8
from jawa.util import classes_from_paths


def _find(value, pattern_r):
    """
    Highlights and returns matching regex.

    :param value: String to search.
    :param pattern_r: Pre-compiled regex pattern.
    :returns: A highlighted string or `None`.
    :rtype: `None` or `str`.
    """
    if not pattern_r.search(value):
        return None

    result = []

    last_match_start = 0
    for match in pattern_r.finditer(value):
        start, end = match.span()

        result.append(value[last_match_start:start])
        result.append(Fore.GREEN)
        result.append(value[start:end])
        result.append(Fore.RESET)

        last_match_start = end

    result.append(value[last_match_start:])

    return ''.join(result)


def sub_grep(args, class_files):
    """
    Look for regex patterns in String and Utf8 constants.
    """
    pattern_r = re.compile(args['<pattern>'])

    for cf in class_files:
        results = []

        for constant in cf.constants:
            if isinstance(constant, String):
                result = _find(constant.string.value, pattern_r)
            elif args['--utf8'] and isinstance(constant, Utf8):
                result = _find(constant.value, pattern_r)
            else:
                continue

            if result:
                results.append(result)

        if results:
            if args['--this']:
                # We just want to display the name of the class
                # where at least one result was found.
                print(cf.this_class.name.value)
            else:
                for result in results:
                    print(result)


def main(argv):
    init()
    args = docopt(__doc__, argv=argv, version=__version__)

    if args['grep']:
        return sub_grep(args, classes_from_paths(args['<files>']))


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
